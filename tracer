#!/usr/local/bin/node

# Run against Chrome with debugging enabled:
# /Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome --remote-debugging-port=9222 --user-data-dir=/tmp/chromeuser2


var first = true
var timelines = []
var timelines_acquired = false
var counters = []
var Chrome = require('chrome-remote-interface');
Chrome(function (chrome) {
    with (chrome) {
        send('HeapProfiler.enable', {}, function(p, r) { console.error("hpe", p, r)  });
        send('Tracing.getCategories', {}, function(p, r) {
            var cats = r.categories
            for ( c in cats ) {
                var v = cats[c]
                if ( v == 'disabled-by-default-devtools.timeline' ) {  
                    timelines.push(v)
                }
            }
            timelines_acquired = true
        });

        on('Tracing.dataCollected', function(p) {
//{ value: 
//   [ { pid: 3253,
//  tid: 1299,
//  ts: 7022249061,
//  ph: 'I',
//  cat: 'disabled-by-default-devtools.timeline',
//  name: 'UpdateCounters',
//  args: 
//   { data: 
//      { documents: 20,
//        nodes: 1041,
//        jsEventListeners: 28,
//        jsHeapSizeUsed: 36104280 } },
//  tts: 2004577,
//  s: 'g' }

            var ar = p['value']
            for ( k in ar ) {
                var e = ar[k]
                if (e['name'] == 'UpdateCounters') {
                    counters.push(e)
                }
            }
        });

        on('Tracing.tracingComplete', function() {
            console.error("Complete...")
            close()

for ( i in counters ) {
    var c = counters[i]
    console.log(c.ts, c.args.data)
}
console.error("counters.len=", counters.length)
        })

// {"id":26,
//        "method":"Tracing.start",
//        "params":{
//            "categories":"-*,disabled-by-default-devtools.timeline,disabled-by-default-devtools.timeline.frame,blink.console,disabled-by-default-devtools.timeline.stack",
//            "options":"",
//            "bufferUsageReportingInterval":500
//        }
//    }

        on('ready', function () {
            if (first && timelines_acquired) {
                first = false
                 console.error('Tracing.start', {'categories': timelines.join(','), 'bufferUsageReportingInterval':500})
                 send('Tracing.start', {'categories': timelines.join(','), 'bufferUsageReportingInterval':500}, console.error)
            }
        })

        setTimeout(function(params) {
            console.error('GC')
            send('HeapProfiler.collectGarbage', console.error);
        }, 2500)
        setTimeout(function(params) {
            console.error("Tracing.end...")
            send('Tracing.end', {}, console.error)
        }, 5000)
    }
}).on('error', function () {
    console.error('Cannot connect to Chrome');
});

